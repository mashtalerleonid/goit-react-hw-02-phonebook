{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contacts/ContactListItem/ContactListItem.jsx","components/Contacts/ContactList/ContactList.jsx","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","addContact","reset","onSubmit","this","onChange","autoComplete","type","pattern","title","required","Component","Filter","filterChange","filter","ContactListItem","id","onDeleteContact","onClick","ContactList","list","console","log","map","item","App","contacts","contact","uuidv4","isAdded","forEach","alert","prevState","deleteContact","contactId","getFilteredContacts","normalizedFilter","toLowerCase","includes","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91d059f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.addContact(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            autoComplete=\"off\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            autoComplete=\"off\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ filterChange, filter }) {\r\n  return (\r\n    <label>\r\n      Find\r\n      <input value={filter} onChange={filterChange} />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterChange: PropTypes.func,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction ContactListItem({ id, name, number, onDeleteContact }) {\r\n  return (\r\n    <li>\r\n      {name}:{number}\r\n      <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import PropTypes from \"prop-types\";\r\nimport ContactListItem from \"components/Contacts/ContactListItem/\";\r\n\r\nfunction ContactList({ list, onDeleteContact }) {\r\n  console.log();\r\n  return (\r\n    <ul>\r\n      {list.map((item) => {\r\n        const { id, name, number } = item;\r\n\r\n        return (\r\n          <ContactListItem\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            number={number}\r\n            onDeleteContact={onDeleteContact}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func,\r\n  list: PropTypes.arrayOf(PropTypes.shape).isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { v4 as uuidv4 } from \"uuid\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactList from \"components/Contacts/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  addContact = ({ name, number }) => {\n    const contact = { id: uuidv4(), name, number };\n\n    let isAdded = false;\n\n    this.state.contacts.forEach((contact) => {\n      if (contact.name === name) {\n        isAdded = true;\n        return;\n      }\n    });\n\n    if (isAdded) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    this.setState((prevState) => ({\n      contacts: [...prevState.contacts, contact],\n    }));\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  filterChange = (e) => {\n    const { value } = e.target;\n    this.setState({ filter: value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter filterChange={this.filterChange} filter={filter} />\n        <ContactList\n          list={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}